{% extends 'base.html.twig' %}

{% block title %}Hello VideoController!{% endblock %}

{% block importmap %}{{ importmap(['app', 'video']) }}{% endblock %}

{% block body %}
    {{ dump() }}

	{% include '_includes/_header.html.twig' %}

	<section class="video-container text__center">

		<h1>{{ video.title }}</h1>
		<p>
			Durée de la vidéo :
			{% set minutes = (video.duration // 60) %}
			{% set seconds = (video.duration % 60) %}
			{{ minutes }}:{{ '%02d'|format(seconds) }}
		</p>

		<div
			class="video-content-detail">
			<!-- Video element with custom controls -->
			<video id="video-player" width="100%">
				<source src="{{ asset('uploads/videos/' ~ video.url) }}" type="video/mp4">
				Your browser does not support the video tag.
			</video>

			<!-- Custom play button -->
			<button id="play-button" class="play-button">
				▶️
			</button>

			<!-- Progress bar -->
			<div class="progress-bar">
				{% set progressPercentage = (progress / video.duration) * 100 %}
				Progression&nbsp;:&nbsp;<span id="progress-percentage">{{ progressPercentage|number_format(2) }}%</span>
			</div>
		</div>

		{% if hasStarted %}
			<p class="alert-warning">Vous avez commencé à regarder cette vidéo, mais vous ne l'avez pas encore terminée.</p>
		{% endif %}

        {% if hasWatched %}
            <p class="alert-success">Vous avez regardé cette vidéo à 100% !</p>
        {% endif %}

	</section>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
            const video = document.getElementById('video-player');
            const playButton = document.getElementById('play-button');
            const progressPercentage = document.getElementById('progress-percentage');

            // Initialisation de la progression depuis Twig (en secondes)
            const savedProgress = {{ progress|default(0)|json_encode|raw }};
            console.log('Progression récupérée depuis Twig:', savedProgress);

            let hideButtonTimeout;

            if (! video || ! playButton) {
            console.error('Éléments vidéo ou bouton de lecture manquants.');
            return;
            }

            // Mise à jour de la progression initiale
            video.addEventListener('loadedmetadata', function () {
            if (savedProgress > 0) {
            video.currentTime = savedProgress;
            }
            updateProgress();
            });

            video.controls = false;

            playButton.addEventListener('click', function () {
            if (video.paused) {
            video.play();
            playButton.textContent = '⏸️';
            showPlayButton();
            } else {
            video.pause();
            playButton.textContent = '▶️';
            }
            });

            video.addEventListener('timeupdate', function () {
            updateProgress();

            const currentProgress = video.currentTime;
            if (currentProgress > 0) {
            fetch('{{ path('video_progress', {id: video.id}) }}', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams(
            {'progress': currentProgress}
            )
            });
            }
            });

            video.addEventListener('pause', function () {
            playButton.textContent = '▶️';
            });

            video.addEventListener('ended', function () {
            playButton.textContent = '▶️';
            fetch('{{ path('video_mark_as_watched', {id: video.id}) }}', {
            method: 'POST',
            headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
            }).then(response => response.json()).then(data => {
            if (data.status === 'Video marked as watched') {
            console.log('Vidéo marquée comme regardée');
            }
            });
            });

            function updateProgress() {
            const currentProgress = video.currentTime;
            const totalDuration = video.duration;

            if (totalDuration > 0) {
            const percentage = (currentProgress / totalDuration) * 100;
            progressPercentage.textContent = percentage.toFixed(2) + ' %';
            } else {
            progressPercentage.textContent = '0%';
            }
            }

            video.addEventListener('mouseover', function () {
            showPlayButton();
            });

            video.addEventListener('mouseleave', function () {
            startHideButtonTimer();
            });

            function showPlayButton() {
            playButton.style.opacity = '1';
            clearTimeout(hideButtonTimeout);
            startHideButtonTimer();
            }

            function hidePlayButton() {
            playButton.style.opacity = '0';
            }

            function startHideButtonTimer() {
            hideButtonTimeout = setTimeout(hidePlayButton, 2000);
            }

            hidePlayButton();
        });
	</script>

{% endblock %}
